// src/service-worker.js
/* eslint-disable no-restricted-globals */

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate, CacheFirst } from 'workbox-strategies';
import { CacheableResponsePlugin } from 'workbox-cacheable-response';

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    if (request.mode !== 'navigate') { return false; }
    if (url.pathname.startsWith('/_')) { return false; }
    if (url.pathname.match(fileExtensionRegexp)) { return false; }
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// Example runtime caching route for requests that aren't handled by the
// precache, like same-origin .png requests
registerRoute(
  // Add other extensions needed (e.g., jpg, gif, svg)
  ({ url }) => url.origin === self.location.origin && /\.(?:png|ico|webp|svg)$/.test(url.pathname),
  new StaleWhileRevalidate({ // Use StaleWhileRevalidate for images maybe? Or CacheFirst.
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
      new CacheableResponsePlugin({ statuses: [0, 200] }), // Cache opaque responses too
    ],
  })
);

// You can add more runtime caching rules here (e.g., for fonts, APIs if needed).

// This allows the web app to trigger skipWaiting via registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

console.log('Explicit src/service-worker.js loaded by Workbox');